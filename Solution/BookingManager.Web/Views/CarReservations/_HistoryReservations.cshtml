@using BookingManager.Web.Models
@using Cars.DTO
@model CarReservationsLogModel

<div class="row">
    <div class="col-md-12">
        <table class="footable table table-striped toggle-arrow-tiny footable-loaded phone breakpoint" data-show-toggle="false" data-sorting="true" data-paging="false" data-filtering="false">
            <thead>
                <tr>
                    <th data-breakpoints="xs">Estado</th>
                    <th>Nombre</th>
                    <th>Apellidos</th>
                    <th data-type="date" data-format-string="DD/MM/YYYY hh:mm a">Recogida</th>
                    <th data-breakpoints="xs" data-type="date" data-format-string="DD/MM/YYYY">Entrega</th>
                    <th data-breakpoints="xs" data-type="number">Dias</th>
                    <th data-breakpoints="xs">Automovil</th>
                    <th data-breakpoints="xs">Vuelo</th>
                    <th data-breakpoints="xs sm md" data-type="date" data-format-string="DD/MM/YYYY hh:mm a">Creada</th>
                    <th data-breakpoints="xs sm md">Por</th>
                    <th data-breakpoints="xs sm md" data-type="date" data-format-string="DD/MM/YYYY hh:mm a">Modificada</th>
                    <th data-breakpoints="xs sm md">Por</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i <= Model.HistoryReservations.Count() - 1; i++)
                {
                    var confirmedBadged = Model.HistoryReservations[i].CancelledOn != null ? "badge badge-inverse" : Model.HistoryReservations[i].ReservationNumber == null ? "badge badge-danger" : Model.HistoryReservations[i].ReservationNumber.Trim() == string.Empty ? "badge badge-danger" : "badge badge-primary";
                    var paymentBadged = Model.HistoryReservations[i].PaymentStatusId == 1 ? "badge badge-danger" : Model.HistoryReservations[i].PaymentStatusId == 2 ? "badge badge-warning" : Model.HistoryReservations[i].PaymentStatusId == 3 ? "badge badge-primary" : "badge badge-success";
                    var modifiedOn = Model.HistoryReservations[i].ModifiedOn == null ? string.Empty : ((DateTime)Model.HistoryReservations[i].ModifiedOn).ToString("dd/MM/yyyy") + " " + ((DateTime)Model.HistoryReservations[i].ModifiedOn).ToString("hh:mm tt");
                    <tr onclick="window.location = 'CarReservations/Edit?Id=@Model.HistoryReservations[i].Id'">
                        <td>
                            <p>
                                <span class="@confirmedBadged">C</span>
                                <span class="@paymentBadged">P</span>
                            </p>
                        </td>
                        <td>@Model.HistoryReservations[i].ClientFirstname</td>
                        <td>@Model.HistoryReservations[i].ClientLastname</td>
                        <td data-value="@Model.HistoryReservations[i].FromDate.ToString("dd/MM/yyyy") @Model.HistoryReservations[i].FromDate.ToString("hh:mm tt")"></td>
                        <td data-value="@Model.HistoryReservations[i].ToDate.ToString("dd/MM/yyyy")"></td>
                        <td>@Model.HistoryReservations[i].Days</td>
                        <td>@Model.HistoryReservations[i].CarCategoryName</td>
                        <td>@Model.HistoryReservations[i].FlightNumber</td>
                        <td data-value="@Model.HistoryReservations[i].CreatedOn.ToString("dd/MM/yyyy") @Model.HistoryReservations[i].CreatedOn.ToString("hh:mm tt")"></td>
                        <td>@Model.HistoryReservations[i].CreatedByUser</td>
                        <td data-value="@modifiedOn"></td>
                        <td>@Model.HistoryReservations[i].ModifiedByUser</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />
<div class="row">
    <div class="col-md-12" style="text-align:center">
        <div class="btn-group">
            @{
                var oneActive = Model.HistoryPageSize == 15 ? "active" : string.Empty;
                var twoActive = Model.HistoryPageSize == 25 ? "active" : string.Empty;
                var threeActive = Model.HistoryPageSize == 50 ? "active" : string.Empty;
                var fourActive = Model.HistoryPageSize == 150 ? "active" : string.Empty;
                <button class="btn btn-white @oneActive" onclick="pageController.onHistoryPageSizeChanged(15);">15</button>
                <button class="btn btn-white @twoActive" onclick="pageController.onHistoryPageSizeChanged(25);">25</button>
                <button class="btn btn-white @threeActive" onclick="pageController.onHistoryPageSizeChanged(50);">50</button>
                <button class="btn btn-white @fourActive" onclick="pageController.onHistoryPageSizeChanged(150);">150</button>
            }
        </div>
        <div class="btn-group">
            @Html.HiddenFor(m => m.HistoryPageNumber)
            @Html.HiddenFor(m => m.HistoryPageSize)
            @Html.HiddenFor(m => m.HistoryTotalPages)
            <button type="button" class="btn btn-white" onclick="pageController.onHistoryPreviousPageSelected();"><i class="fa fa-chevron-left"></i></button>
            @for (int i = 1; i <= Model.HistoryTotalPages; i++)
            {
                if (i == Model.HistoryPageNumber)
                {
                    <button class="btn btn-white active" onclick="pageController.onHistoryPageSelected(@i);">@i</button>
                }
                else
                {
                    <button class="btn btn-white" onclick="pageController.onHistoryPageSelected(@i);">@i</button>
                }
            }
            <button type="button" class="btn btn-white" onclick="pageController.onHistoryNextPageSelected();"><i class="fa fa-chevron-right"></i> </button>
        </div>
    </div>
    <br /><br /><br />
</div>
